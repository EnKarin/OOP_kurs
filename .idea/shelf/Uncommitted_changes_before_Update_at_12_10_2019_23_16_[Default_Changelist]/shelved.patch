Index: src/Beings/Carnivorous.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Beings;\r\n\r\nimport java.util.Random;\r\nimport java.util.Set;\r\n\r\npublic class Carnivorous extends Animals{\r\n    private int count = 0;\r\n\r\n    public Carnivorous(boolean male, int maxHp, int x, int y, double speed){\r\n        super(male, maxHp, x, y, speed);\r\n    }\r\n\r\n    @Override\r\n    Beings search(Set<Beings> unit, Class searchingClass) {\r\n        int delta = Integer.MAX_VALUE;\r\n        Beings searching = null;\r\n        for(Beings temp: unit){\r\n            if(temp.getClass().equals(searchingClass) && (int)(Math.sqrt(Math.pow(x - temp.x, 2) +\r\n                    Math.pow(y - temp.y, 2))) < delta && temp.currentHp <= currentHp) {\r\n                delta = (int)Math.sqrt(Math.pow(x - temp.x, 2) + Math.pow(y - temp.y, 2));\r\n                searching = temp;\r\n            }\r\n        }\r\n        return searching;\r\n    }\r\n\r\n    @Override\r\n    void reproduction(Set<Beings> unit){ //размножение хищников\r\n        Random rand = new Random();\r\n        final Carnivorous mam = (Carnivorous) searchPartner(unit, Carnivorous.class);\r\n        if(mam != null) {\r\n            int distance = (int) Math.sqrt(Math.pow(x - mam.x, 2) + Math.pow(y - mam.y, 2));\r\n            final double sin = (mam.y - y) / distance;\r\n            final double cos = (mam.x - x) / distance;\r\n            x += speed * cos;\r\n            y += speed * sin;\r\n            if (Math.abs(x - mam.x) <= 3 && Math.abs(y - mam.y) <= 3) {\r\n                count++;\r\n                currentHp -= currentHp * 0.15;\r\n                unit.add(new Carnivorous(rand.nextBoolean(),(int)(maxHp * 0.75\r\n                        + rand.nextInt((int) Math.abs(maxHp - mam.maxHp) + 1)), (int)(x + 15), (int)(y + 15),\r\n                        speed * 0.7 + rand.nextInt((int)(Math.abs(speed - mam.speed)) + 1)));\r\n            }\r\n        }\r\n        else {\r\n            movement();\r\n        }\r\n    }\r\n\r\n    private Herbivorous hunger(Set<Beings> unit){ //поиск еды\r\n        Herbivorous temp = (Herbivorous) search(unit, Herbivorous.class);\r\n        if(temp != null) {\r\n            int distance = (int) Math.sqrt(Math.pow(x - temp.x, 2) + Math.pow(y - temp.y, 2));\r\n            if (distance <= 500) {\r\n                return temp;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private void pursuit(Set<Beings> unit){ //преследование добычи\r\n        final Herbivorous hunger = hunger(unit);\r\n        if(hunger != null) {\r\n            final int distance = (int) Math.sqrt(Math.pow(x - hunger.x, 2) + Math.pow(y - hunger.y, 2));\r\n            final double sin = (hunger.y - y) / distance;\r\n            final double cos = (hunger.x - x) / distance;\r\n            x += 1.3 * speed * cos;\r\n            y += 1.3 * speed * sin;\r\n            currentHp -= currentHp * 0.002;\r\n            if(Math.abs(x - hunger.x) <= 3 && Math.abs(y - hunger.y) <= 3){\r\n                if(currentHp + hunger.currentHp > maxHp){\r\n                    currentHp = maxHp;\r\n                }\r\n                else {\r\n                    currentHp += hunger.currentHp;\r\n                }\r\n                hunger.currentHp = 0;\r\n            }\r\n        }\r\n        else {\r\n            movement();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean live(Set<Beings> unit){\r\n        Random rand = new Random();\r\n        check();\r\n\r\n        currentHp -= currentHp * 0.002;\r\n        age += 0.002;\r\n        if(currentHp <= 0.0001){\r\n            return false;\r\n        }\r\n        else if(rand.nextInt((int)age * 100 + 1) == 500){\r\n            return false;\r\n        }\r\n        else if(currentHp < maxHp * 0.7){\r\n            pursuit(unit);\r\n        }\r\n        else if(currentHp >= maxHp * 0.5 && age >= 0.5 && age <= 0.6 && count < 3){\r\n            reproduction(unit);\r\n        }\r\n        else {\r\n            movement();\r\n        }\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Beings/Carnivorous.java	(revision 3b837981231b11e9326dffb1d6c28a2ba6998436)
+++ src/Beings/Carnivorous.java	(date 1570896941306)
@@ -36,7 +36,7 @@
             y += speed * sin;
             if (Math.abs(x - mam.x) <= 3 && Math.abs(y - mam.y) <= 3) {
                 count++;
-                currentHp -= currentHp * 0.15;
+                currentHp -= currentHp * 0.003;
                 unit.add(new Carnivorous(rand.nextBoolean(),(int)(maxHp * 0.75
                         + rand.nextInt((int) Math.abs(maxHp - mam.maxHp) + 1)), (int)(x + 15), (int)(y + 15),
                         speed * 0.7 + rand.nextInt((int)(Math.abs(speed - mam.speed)) + 1)));
@@ -87,7 +87,7 @@
         Random rand = new Random();
         check();
 
-        currentHp -= currentHp * 0.002;
+        currentHp -= currentHp * 0.003;
         age += 0.002;
         if(currentHp <= 0.0001){
             return false;
@@ -98,7 +98,7 @@
         else if(currentHp < maxHp * 0.7){
             pursuit(unit);
         }
-        else if(currentHp >= maxHp * 0.5 && age >= 0.5 && age <= 0.6 && count < 3){
+        else if(currentHp >= maxHp * 0.5 && age >= 0.5 && age <= 0.61 && count < 3){
             reproduction(unit);
         }
         else {
Index: src/Beings/Herbivorous.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Beings;\r\n\r\nimport java.util.Random;\r\nimport java.util.Set;\r\n\r\npublic class Herbivorous extends Animals {\r\n    private int count = 0;\r\n\r\n    public Herbivorous(boolean male, int maxHp, int x, int y, double speed) {\r\n        super(male, maxHp, x, y, speed);\r\n    }\r\n\r\n    @Override\r\n    void reproduction(Set<Beings> unit) { //размножение травоядных\r\n        Random rand = new Random();\r\n        final Herbivorous mam = (Herbivorous) searchPartner(unit, Herbivorous.class);\r\n        if (enemy(unit) == null && mam != null) {\r\n            int distance = (int) Math.sqrt(Math.pow(x - mam.x, 2) + Math.pow(y - mam.y, 2));\r\n            final double sin = (mam.y - y) / distance;\r\n            final double cos = (mam.x - x) / distance;\r\n            x += speed * cos;\r\n            y += speed * sin;\r\n            if (Math.abs(x - mam.x) <= 3 && Math.abs(y - mam.y) <= 3) {\r\n                count++;\r\n                currentHp -= currentHp * 0.15;\r\n                unit.add(new Herbivorous(rand.nextBoolean(),(int)(maxHp * 0.75\r\n                        + rand.nextInt((int) Math.abs(maxHp - mam.maxHp) + 1)), (int)(x + 15),\r\n                        (int)(y + 15), speed * 0.7 + rand.nextInt((int)(Math.abs(speed - mam.speed)) + 1)));\r\n            }\r\n        }\r\n        else if (enemy(unit) != null) {\r\n            escape(unit);\r\n        }\r\n        else {\r\n            movement();\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    Beings search(Set<Beings> unit, Class searchingClass) {\r\n        int delta = Integer.MAX_VALUE;\r\n        Beings searching = null;\r\n        for(Beings temp: unit){\r\n            if(temp.getClass().equals(searchingClass) && (int)(Math.sqrt(Math.pow(x - temp.x, 2)\r\n                    + Math.pow(y - temp.y, 2))) < delta && (searchingClass.equals(Plants.class)\r\n                    || searchingClass.equals(Carnivorous.class) && temp.currentHp * 1.5 > currentHp)) {\r\n                delta = (int)Math.sqrt(Math.pow(x - temp.x, 2) + Math.pow(y - temp.y, 2));\r\n                searching = temp;\r\n            }\r\n        }\r\n        return searching;\r\n    }\r\n\r\n    private Carnivorous enemy(Set<Beings> unit) { //проверка есть ли опасность\r\n        final Carnivorous temp = (Carnivorous) search(unit, Carnivorous.class);\r\n        if (temp != null && (int) Math.sqrt(Math.pow(x - temp.x, 2) + Math.pow(y - temp.y, 2)) <= 200) {\r\n            return temp;\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    private void escape(Set<Beings> unit) { //побег\r\n        final Carnivorous enemy = enemy(unit);\r\n        final int distance = (int) Math.sqrt(Math.pow(x - enemy.x, 2) + Math.pow(y - enemy.y, 2));\r\n        final double sin = (enemy.y - y) / distance;\r\n        final double cos = (enemy.x - x)/ distance;\r\n        x -= 1.4 * speed * cos;\r\n        y -= 1.4 * speed * sin;\r\n        currentHp -= currentHp * 0.01;\r\n        if(Math.abs(x - enemy.x) <= 1 && Math.abs(y - enemy.y) <= 1){\r\n            live = false;\r\n        }\r\n    }\r\n\r\n    private void hunger(Set<Beings> unit){ //поиск еды\r\n        Plants temp = (Plants) search(unit, Plants.class);\r\n        if(temp != null) {\r\n            final int distance = (int) Math.sqrt(Math.pow(x - temp.x, 2) + Math.pow(y - temp.y, 2));\r\n            final double sin = (temp.y - y) / distance;\r\n            final double cos = (temp.x - x) / distance;\r\n            x += 1.2 * speed * cos;\r\n            y += 1.2 * speed * sin;\r\n            currentHp -= currentHp * 0.005;\r\n            if (Math.abs(x - temp.x) <= currentHp && Math.abs(y - temp.y) <= currentHp) {\r\n                if(currentHp + temp.currentHp > maxHp){\r\n                    currentHp = maxHp;\r\n                }\r\n                else {\r\n                    currentHp += temp.currentHp;\r\n                }\r\n                temp.currentHp = 0;\r\n            }\r\n        }\r\n        else {\r\n            movement();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean live(Set<Beings> unit){\r\n        Random rand = new Random();\r\n        check();\r\n\r\n        currentHp -= currentHp * 0.001;\r\n        age += 0.002;\r\n        if(currentHp <= 0.00001){\r\n            return false;\r\n        }\r\n        else if(rand.nextInt((int)age * 100 + 1) == 500){\r\n            return false;\r\n        }\r\n        else if(enemy(unit) != null){\r\n            escape(unit);\r\n            return live;\r\n        }\r\n        else if(currentHp < maxHp * 0.68){\r\n            hunger(unit);\r\n        }\r\n        else if(currentHp >= maxHp * 0.5 && age >= 0.5 && age <= 0.604 && count < 4){\r\n            reproduction(unit);\r\n        }\r\n        else {\r\n            movement();\r\n        }\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Beings/Herbivorous.java	(revision 3b837981231b11e9326dffb1d6c28a2ba6998436)
+++ src/Beings/Herbivorous.java	(date 1570896943046)
@@ -22,7 +22,7 @@
             y += speed * sin;
             if (Math.abs(x - mam.x) <= 3 && Math.abs(y - mam.y) <= 3) {
                 count++;
-                currentHp -= currentHp * 0.15;
+                currentHp -= currentHp * 0.0002;
                 unit.add(new Herbivorous(rand.nextBoolean(),(int)(maxHp * 0.75
                         + rand.nextInt((int) Math.abs(maxHp - mam.maxHp) + 1)), (int)(x + 15),
                         (int)(y + 15), speed * 0.7 + rand.nextInt((int)(Math.abs(speed - mam.speed)) + 1)));
@@ -67,7 +67,7 @@
         final double cos = (enemy.x - x)/ distance;
         x -= 1.4 * speed * cos;
         y -= 1.4 * speed * sin;
-        currentHp -= currentHp * 0.01;
+        currentHp -= currentHp * 0.001;
         if(Math.abs(x - enemy.x) <= 1 && Math.abs(y - enemy.y) <= 1){
             live = false;
         }
@@ -81,7 +81,7 @@
             final double cos = (temp.x - x) / distance;
             x += 1.2 * speed * cos;
             y += 1.2 * speed * sin;
-            currentHp -= currentHp * 0.005;
+            currentHp -= currentHp * 0.002;
             if (Math.abs(x - temp.x) <= currentHp && Math.abs(y - temp.y) <= currentHp) {
                 if(currentHp + temp.currentHp > maxHp){
                     currentHp = maxHp;
@@ -114,10 +114,10 @@
             escape(unit);
             return live;
         }
-        else if(currentHp < maxHp * 0.68){
+        else if(currentHp < maxHp * 0.6){
             hunger(unit);
         }
-        else if(currentHp >= maxHp * 0.5 && age >= 0.5 && age <= 0.604 && count < 4){
+        else if(currentHp >= maxHp * 0.6 && age >= 0.5 && age <= 0.6 && count < 4){
             reproduction(unit);
         }
         else {
Index: src/Main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Main;\r\n\r\nimport java.awt.event.*;\r\nimport java.awt.*;\r\nimport javax.swing.*;\r\nimport java.util.*;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\nimport Beings.*;\r\n\r\npublic class Main extends JFrame{\r\n    int x = 0, y = 0;\r\n    static Set<Beings> set = Collections.newSetFromMap(new ConcurrentHashMap<>());\r\n\r\n    Main(){\r\n        setBounds(0, 0, 1370, 727);\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setVisible(true);\r\n        Panel panel = new Panel(set);\r\n        add(panel);\r\n        panel.setVisible(true);\r\n\r\n\r\n        addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                super.keyTyped(e);\r\n                if(e.getKeyCode() == KeyEvent.VK_RIGHT && x < 1630 ){\r\n                    x+=50;\r\n                    panel.setxy(x, y);\r\n                    repaint();\r\n                }\r\n                else if(e.getKeyCode() == KeyEvent.VK_LEFT && x > 0){\r\n                    x-= 50;\r\n                    panel.setxy(x, y);\r\n                    repaint();\r\n                }\r\n                else if(e.getKeyCode() == KeyEvent.VK_UP && y > 0){\r\n                    y-=50;\r\n                    panel.setxy(x, y);\r\n                    repaint();\r\n                }\r\n                else if(e.getKeyCode() == KeyEvent.VK_DOWN && y < 2273){\r\n                    y+=50;\r\n                    panel.setxy(x, y);\r\n                    repaint();\r\n                }\r\n            }\r\n        });\r\n        while (true){\r\n            repaint(32, 0, 0, getWidth(), getHeight());\r\n            if (set.size() == 0){\r\n                break;\r\n            }\r\n        }\r\n        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Random rand = new Random();\r\n        Random num = new Random();\r\n        num.setSeed(600);\r\n        rand.setSeed(2);\r\n        for(int i = 0, r = num.nextInt(950); i < r; i++){\r\n            set.add(new Plants(new Random().nextBoolean(), rand.nextInt(35), rand.nextInt(3000),\r\n                    rand.nextInt(3000)));\r\n        }\r\n        num.setSeed(200);\r\n        rand.setSeed(5);\r\n        for(int i = 0, r = num.nextInt(320); i < r; i++){\r\n            set.add(new Herbivorous(new Random().nextBoolean(), rand.nextInt(40), rand.nextInt(3000),\r\n                    rand.nextInt(3000), rand.nextDouble() * 5 + 1));\r\n        }\r\n        rand.setSeed(8);\r\n        num.setSeed(110);\r\n        for(int i = 0, r = num.nextInt(140); i < r; i++){\r\n            set.add(new Carnivorous(new Random().nextBoolean(), rand.nextInt(60), rand.nextInt(3000),\r\n                    rand.nextInt(3000), rand.nextDouble() * 6 + 2));\r\n        }\r\n\r\n        new Main();\r\n    }\r\n}\r\n\r\nclass Panel extends JPanel{\r\n    int x, y;\r\n    Color red;\r\n    Set<Beings> set;\r\n\r\n    Panel(Set<Beings> set){\r\n        red = new Color(0xFF1109);\r\n        this.set = set;\r\n    }\r\n\r\n    void setxy(int xWindow, int yWindow){\r\n        x = xWindow;\r\n        y = yWindow;\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        if(x == 0){\r\n            g.setColor(red);\r\n            g.drawLine(1, 0, 1, getHeight());\r\n        }\r\n        else if(x > 1630){\r\n            g.setColor(red);\r\n            g.drawLine(getWidth() - 1, 0, getWidth() - 1, getHeight());\r\n        }\r\n        if(y == 0){\r\n            g.setColor(red);\r\n            g.drawLine(1, 1, getWidth() - 1, 1);\r\n        }\r\n        else if(y > 2273){\r\n            g.setColor(red);\r\n            g.drawLine(0, getHeight() - 1 ,getWidth(), getHeight() - 1);\r\n        }\r\n        for(Beings temp: set){\r\n            if(!temp.live(set)){\r\n                set.remove(temp);\r\n            }\r\n            else if (temp.getX() > x && temp.getX() < getWidth() + x && temp.getY() > y && temp.getY() < getHeight() + y){\r\n                if(temp.getClass().equals(Plants.class)){\r\n                    if(temp.isMale()){\r\n                        g.setColor(new Color(50, 177, 24));\r\n                    }\r\n                    else{\r\n                        g.setColor(new Color(156, 255, 17, 221));\r\n                    }\r\n                }\r\n                else if(temp.getClass().equals(Herbivorous.class)){\r\n                    if(temp.isMale()){\r\n                        g.setColor(new Color(0x216D89));\r\n                    }\r\n                    else{\r\n                        g.setColor(new Color(0x85247385, true));\r\n                    }\r\n                }\r\n                else {\r\n                    if(temp.isMale()){\r\n                        g.setColor(new Color(0x7C1923));\r\n                    }\r\n                    else{\r\n                        g.setColor(new Color(0xAE7A282D, true));\r\n\r\n                    }\r\n                }\r\n                g.fillOval(temp.getX() - x, temp.getY() - y, (int)(temp.getCurrentHp() / 2), (int)(temp.getCurrentHp() / 2));\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Main/Main.java	(revision 3b837981231b11e9326dffb1d6c28a2ba6998436)
+++ src/Main/Main.java	(date 1570896579052)
@@ -61,8 +61,8 @@
         Random num = new Random();
         num.setSeed(600);
         rand.setSeed(2);
-        for(int i = 0, r = num.nextInt(950); i < r; i++){
-            set.add(new Plants(new Random().nextBoolean(), rand.nextInt(35), rand.nextInt(3000),
+        for(int i = 0, r = num.nextInt(900); i < r; i++){
+            set.add(new Plants(new Random().nextBoolean(), rand.nextInt(30), rand.nextInt(3000),
                     rand.nextInt(3000)));
         }
         num.setSeed(200);
@@ -71,7 +71,7 @@
             set.add(new Herbivorous(new Random().nextBoolean(), rand.nextInt(40), rand.nextInt(3000),
                     rand.nextInt(3000), rand.nextDouble() * 5 + 1));
         }
-        rand.setSeed(8);
+        rand.setSeed(10);
         num.setSeed(110);
         for(int i = 0, r = num.nextInt(140); i < r; i++){
             set.add(new Carnivorous(new Random().nextBoolean(), rand.nextInt(60), rand.nextInt(3000),
